/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        int n = inorder.length;

        return helper(inorder,postorder,0,n-1,0,n-1);
    }

    public TreeNode helper(int[] inorder,int[] postorder,int inStart,int inEnd,int poStart,int posEnd){
        if(inStart > inEnd){
            return null;
        }
        int rootVal = postorder[posEnd];
        TreeNode root = new TreeNode(rootVal);

        int rootIndex = inStart;

        for(;rootIndex <= inEnd;rootIndex++){
            if(inorder[rootIndex] == rootVal){
                break;
            }
        }

        int LeftTreeSize = rootIndex - inStart;
        int RightTreeSize = inEnd - rootIndex;

        root.left = helper(inorder,postorder,inStart,rootIndex-1,poStart,poStart + LeftTreeSize -1);
        root.right = helper(inorder,postorder,rootIndex+1,inEnd,posEnd-RightTreeSize,posEnd-1);

        return root;
    }
}
