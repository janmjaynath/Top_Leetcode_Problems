
import java.util.*;

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if(nums2.length<nums1.length){
           return findMedianSortedArrays(nums2,nums1);
        }
        int m = nums1.length;
        int n = nums2.length;
        int start = 0;
        int end = m;

        while(start<=end){
            int part1 = (start+end)/2;
            int part2 = (m+n+1)/2-part1;

            int maxLeftNum1 = part1 == 0 ? Integer.MIN_VALUE : nums1[part1-1];
            int maxLeftNum2 = part2 == 0 ? Integer.MIN_VALUE : nums2[part2-1];
            int minRightNum1 = part1 == m ? Integer.MAX_VALUE : nums1[part1];
            int minRightNum2 = part2 == n ? Integer.MAX_VALUE : nums2[part2];

            if(maxLeftNum1 <= minRightNum2 && maxLeftNum2 <= minRightNum1){

                if((m + n) % 2 == 0){
                    return (Math.max(maxLeftNum1,maxLeftNum2) + Math.min(minRightNum1,minRightNum2)) /2.0 ;
                }
                else{
                    return Math.max(maxLeftNum1,maxLeftNum2);
                }
            }
            else if(maxLeftNum1 > minRightNum2){
                end = part1 -1;
            }
            else{
                start = part1 + 1;
            }
        }
        throw new IllegalArgumentException();
    }
}
