import java.util.*;

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(nums);  // Step 1: Sort the array

        for (int i = 0; i < nums.length - 2; i++) {
            // Step 2: Skip duplicate elements for the first element
            if (i > 0 && nums[i] == nums[i - 1]) continue;

            // Optimization: If the current number is greater than 0, break early
            if (nums[i] > 0) break;

            int left = i + 1, right = nums.length - 1;

            while (left < right) {
                int sum = nums[i] + nums[left] + nums[right];

                if (sum == 0) {
                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));

                    // Skip duplicate elements for the left and right pointers
                    while (left < right && nums[left] == nums[left + 1]) left++;
                    while (left < right && nums[right] == nums[right - 1]) right--;

                    // Move pointers inward after finding a valid triplet
                    left++;
                    right--;
                } else if (sum < 0) {
                    left++;  // Sum is too small, move left pointer to increase sum
                } else {
                    right--;  // Sum is too large, move right pointer to decrease sum
                }
            }
        }
        return result;
    }
}
